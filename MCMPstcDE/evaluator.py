from MCMPinstance import MCMPInstance
from stcMap.stcMap import  STC_Map,GridInd,STCGridInd,STCVertType,STCVert,STCVirtualVertType,\
    DirType,getDir
import  random
from enum import  Enum
from  drawEnv import drawPic,drawSTCPic,drawSTCGraph,drawEvalSTCGraph
from math import floor
from itertools import chain
import  networkx as nx
import  numpy as np
import  math
import  time
from MCMPastar import MCMP_Solver,STC_ASTAR
from stcMap.stc2path import STC2Path


class LawnMainDir(Enum):
    right = 1
    top  = 2
    left = 3
    bottom = 4

class STCEvaluator(object):
    def __init__(self,ins):
        self._ins = ins
        self._row = ins._row
        self._col = ins._col
        self._ins = ins
        self._mat = ins._mat
        self._robNum = ins._robNum
        self._robPosLst = ins._robPosLst
        self._robRowLst = ins._robRowLst
        self._robColLst = ins._robColLst
        self._robReachRowLst = ins._robReachRowLst
        self._robReachColLst = ins._robReachColLst

        self._s_map = STC_Map(self._ins)
        self._stcGraph = self._s_map._stcGraph
        self._vitualIndSet = self._s_map._vitualIndSet
        self._stcVitualIndSet = self._s_map._stcVitualIndSet
        self._waySTCNodeNum = self._s_map._waySTCNodeNum


        self._patternLst = []
        self._patternLst.append([LawnMainDir.right, LawnMainDir.top, LawnMainDir.bottom, LawnMainDir.left])
        self._patternLst.append([LawnMainDir.right, LawnMainDir.bottom, LawnMainDir.top, LawnMainDir.left])

        self._patternLst.append([LawnMainDir.left, LawnMainDir.top, LawnMainDir.bottom, LawnMainDir.right])
        self._patternLst.append([LawnMainDir.left, LawnMainDir.bottom, LawnMainDir.top, LawnMainDir.right])

        self._patternLst.append([LawnMainDir.top, LawnMainDir.left, LawnMainDir.right, LawnMainDir.bottom])
        self._patternLst.append([LawnMainDir.top, LawnMainDir.right, LawnMainDir.left, LawnMainDir.bottom])

        self._patternLst.append([LawnMainDir.bottom, LawnMainDir.left, LawnMainDir.right, LawnMainDir.top])
        self._patternLst.append([LawnMainDir.bottom, LawnMainDir.right, LawnMainDir.left, LawnMainDir.top])

        self._dirDic = dict()
        self._dirDic[LawnMainDir.right] = [LawnMainDir.top, LawnMainDir.right, LawnMainDir.bottom]
        self._dirDic[LawnMainDir.left] = [LawnMainDir.top, LawnMainDir.left, LawnMainDir.bottom]
        self._dirDic[LawnMainDir.top] = [LawnMainDir.left, LawnMainDir.top, LawnMainDir.right]
        self._dirDic[LawnMainDir.bottom] = [LawnMainDir.left, LawnMainDir.bottom, LawnMainDir.right]

        self._oppoDirDic = dict()
        self._oppoDirDic[LawnMainDir.right] = LawnMainDir.left
        self._oppoDirDic[LawnMainDir.left] = LawnMainDir.right
        self._oppoDirDic[LawnMainDir.top] = LawnMainDir.bottom
        self._oppoDirDic[LawnMainDir.bottom] = LawnMainDir.top

        self.stcConvertPath = STC2Path(self._ins, self._s_map)
        pass


    def evaluate(self, x):
        # print('waySTCNodeNum', self._waySTCNodeNum)
        # print(x)
        self.generateSTree(x)
        # print('xxxx')
        if len(self._coverSet) == self._waySTCNodeNum:
            makespan = self.stcConvertPath.generatePath(self._robStartSTCIndLst,
                                                   self._robStreeLst,
                                                   self._robSetLst)
            return True,makespan
        else:
            return False,np.inf
        # return makespan

    def generateSTree(self,x):
        self._robPatternLst = [[] for x in range(self._robNum)]
        for robID in range(self._robNum):
            for ind in x[robID]:
                firstOrdPos = ind[0]
                patternInd = floor(ind[1] / 0.125)
                rob_step = floor(ind[2] * self._stcGraph.number_of_nodes() * 0.5)
                self._robPatternLst[robID].append((firstOrdPos, patternInd, rob_step))

        # robID = 0
        # for ind in x:
        #     # main_dir,first_dir = self._patternLst[floor(ind[0]/0.125)]
        #     firstOrdPos = ind[0]
        #     patternInd = floor(ind[1]/0.125)
        #     '''
        #     感觉没有必要那么大
        #     '''
        #     rob_step = floor(ind[2] * self._stcGraph.number_of_nodes() * 0.5)
        #     self._robPatternLst[robID].append((firstOrdPos,patternInd,rob_step))
        #
        #     if robID == (self._robNum-1):
        #         robID = 0
        #     else:
        #         robID += 1
        # print(self._robPatternLst)
        # print(len(self._robPatternLst[0]))
        # print(len(self._robPatternLst[1]))
        self._robSetLst = [[] for x in range(self._robNum)]
        self._robStartSTCIndLst = []
        self._coverSet = set()

        for robID in range(self._robNum):
            stc_ind  = self._s_map.gridInd2STCGridInd(GridInd(row = self._robPosLst[robID][0],
                                                          col = self._robPosLst[robID][1]))
            self._robSetLst[robID].append(stc_ind)
            self._robStartSTCIndLst.append(stc_ind)
            self._coverSet.add(stc_ind)

        self._c_robPosLst = []
        self._c_robDirLst = []
        self._p_robDirLst = []
        self._c_mainDirLst = []
        self._c_robStepLst = [0 for x in range(self._robNum)]
        self._robStepLst  = []
        self._robPatternStepLst = [0 for x in range(self._robNum)]
        self._robStreeLst = [nx.Graph() for x in range(self._robNum)]
        self._c_sortPatternIndLst = []
        self._robEndLst = [False for x in range(self._robNum)]

        # for robID,x in enumerate(self._robPatternLst):
        #     # print(x[0])
        #     deg_file.write('robID'+str(robID)+'\n' )
        #     for p in x:
        #         deg_file.write(str(p)+'\n')
        # deg_file.flush()

        for robID in range(self._robNum):
            firstOrdPos,patternInd,rob_step = self._robPatternLst[robID][0]
            firstBool,p_pos,pos = self.getNextBranchPos(robID,firstOrdPos)
            # c_pos,pos = self.getFirstPos(robID,main_dir,first_dir)
            # print('first_pos', pos)
            self._c_sortPatternIndLst.append(patternInd)
            self._c_robPosLst.append(pos)
            # self._c_robDirLst.append(first_dir)
            # self._p_robDirLst.append(first_dir)
            # self._c_mainDirLst.append(main_dir)
            self._robStepLst.append(rob_step)
            self._robSetLst[robID].append(pos)
            # self._robStreeLst[robID].add_node(pos)
            self._robStreeLst[robID].add_edge(p_pos,pos)
            self._coverSet.add(pos)



        # raise  Exception('XX')
        # print(self._robPatternLst)
        pass
            # for y in x:
            #     print(y)
        circleTime = 0
        while False in self._robEndLst:
            for robID in range(self._robNum):
                if self._robEndLst[robID]:
                    continue
                pos = self.getUncoverPos(robID)
                if (pos.row == -1 and  pos.col == -1) or self._c_robStepLst[robID] > self._robStepLst[robID]:
                    self._robPatternStepLst[robID] += 1
                    # print('robID ', robID, ' PatternStep ', self._robPatternStepLst[robID])
                    robPatternStep = self._robPatternStepLst[robID]
                    # print('robID = ',robID, ' robPatternStep = ', robPatternStep)
                    if robPatternStep < len(self._robPatternLst[robID]):
                        firstOrdPos, patternInd, rob_step = self._robPatternLst[robID][robPatternStep]
                        firstBool, p_pos,f_pos = self.getNextBranchPos(robID,firstOrdPos)
                    else:
                        firstBool = False
                    if firstBool:
                        self._coverSet.add(f_pos)
                        self._robSetLst[robID].append(f_pos)
                        self._c_robPosLst[robID] = f_pos
                        self._c_sortPatternIndLst[robID] = patternInd
                        self._c_robStepLst[robID] = 0
                        self._robStreeLst[robID].add_edge(p_pos, f_pos)
                    else:
                        self._robEndLst[robID] = True
                        # raise  Exception('xx')
                else:
                    c_pos = self._c_robPosLst[robID]
                    self._robStreeLst[robID].add_edge(c_pos,pos)
                    self._c_robStepLst[robID] += 1
                    self._robSetLst[robID].append(pos)
                    self._c_robPosLst[robID] = pos
                    self._coverSet.add(pos)
                    # print(pos)
            circleTime += 1
            # print('circletime = ',circleTime)
            # if circleTime == 47:
            #     print('47')
            #     pass
            if circleTime > 200:
                break
        # print('._coverSet = ',len(self._coverSet))

    def getUncoverPos(self,robID):
        c_pos = self._c_robPosLst[robID]
        # c_robDir = self._c_robDirLst[robID]
        # p_robDir = self._p_robDirLst[robID]
        # c_mainDir = self._c_mainDirLst[robID]
        c_sPatternInd = self._c_sortPatternIndLst[robID]
        sortDirLst = self._patternLst[c_sPatternInd]

        for dir in sortDirLst:
            pos = self.getNextUnCoverLawnPos(c_pos,dir)
            if pos.row == -1 and pos.col == -1:
                continue
            return pos
        return pos

    def getNextBranchPos(self,robID, var):
        robSet = self._robSetLst[robID]
        robNeiLst = []
        for stc_ind in robSet:
            # print('stc_ind = ', stc_ind)
            neiLst = self._stcGraph.neighbors(stc_ind)
            for neiInd in neiLst:
                if neiInd not in self._coverSet:
                    # print('neiInd = ',neiInd)
                    dis = self.calBranchDis(robID,neiInd)
                    robNeiLst.append((stc_ind, neiInd, dis))
                    # print(abs(angle -base_angle))
        robNeiNum  = len(robNeiLst)
        if robNeiNum != 0 :
            robNeiSet = sorted(robNeiLst, key = lambda  x: x[2])
            resInd = floor(robNeiNum * var)
            return True,robNeiSet[resInd][0],robNeiSet[resInd][1]
        else:
            return False, None, None


    def calAngle(self,robID, stc_ind):
        rob_stc_ind = self._robStartSTCIndLst[robID]
        base_x = self._stcGraph.nodes[rob_stc_ind]['vert']._pos_x
        base_y = self._stcGraph.nodes[rob_stc_ind]['vert']._pos_y

        ind_x = self._stcGraph.nodes[stc_ind]['vert']._pos_x
        ind_y = self._stcGraph.nodes[stc_ind]['vert']._pos_y
        y = ind_y - base_x
        x = ind_x - base_x

        if ind_y > base_y:
            return math.atan2(y,x)
        else:
            return math.atan2(y,x) + math.pi

    def calBranchDis(self,robID,stc_ind):
        # dis = 0
        vec_base = np.array([self._stcGraph.nodes[stc_ind]['vert']._pos_x, self._stcGraph.nodes[stc_ind]['vert']._pos_y])
        rob_stc_ind = self._robStartSTCIndLst[robID]
        vec = np.array([self._stcGraph.nodes[rob_stc_ind]['vert']._pos_x, self._stcGraph.nodes[rob_stc_ind]['vert']._pos_y])
        dis = np.linalg.norm(vec_base - vec)
        return dis


    def getFirstPosByDis(self,robID, var):
        robSet = self._robSetLst[robID]
        robNeiSet = []
        for stc_ind in robSet:
            neiLst = self._stcGraph.neighbors(stc_ind)
            for neiInd in neiLst:
                if neiInd not in self._coverSet:
                    dis = self.calFirstDis(robID,neiInd)
                    robNeiSet.append((neiInd,dis))
        robNeiNum  = len(robNeiSet)
        if robNeiNum != 0 :
        # print(robNeiSet)
            robNeiSet = sorted(robNeiSet, key = lambda  x: x[1])
            resInd = floor(robNeiNum * var)
            return True,robNeiSet[resInd][0]
        else:
            return False, None
    def calFirstDis(self,robID,stc_ind):
        dis = 0
        vec_base = np.array([self._stcGraph.nodes[stc_ind]['vert']._pos_x, self._stcGraph.nodes[stc_ind]['vert']._pos_y])


        for x in range(self._robNum):
            if x == robID:
                continue
            rob_stc_ind = self._robStartSTCIndLst[x]
            vec = np.array([self._stcGraph.nodes[rob_stc_ind]['vert']._pos_x, self._stcGraph.nodes[rob_stc_ind]['vert']._pos_y])
            dis += np.linalg.norm(vec_base - vec)
        return dis

    def getFirstPos(self,robID,mainDir, firstDir):
        c_pos = self._robStartSTCIndLst[robID]
        c_robDir = firstDir
        p_robDir = firstDir

        while True:
            pos = self.getNextLawnPos(c_pos,c_robDir)
            # print(pos)
            if pos.row == -1 and pos.col == -1:
                p_robDir = c_robDir
                c_robDir = self.getNextDirPos(mainDir,c_robDir,p_robDir)
                if c_robDir == mainDir:
                    pos = self.getNextLawnPos(c_pos,c_robDir)
                    if pos.row == -1 and pos.col == -1:
                        return c_pos, pos
                        # raise Exception('xx')
                        # break
                    else:
                        if pos not in self._coverSet:
                            return c_pos,pos
                        c_pos = pos

                        c_robDir = self.getNextDirPos(mainDir, c_robDir, p_robDir)
            else:
                if pos not in self._coverSet:
                    return c_pos, pos
                c_pos = pos


    def getNextLawnPos(self,stc_ind :STCGridInd, dir :LawnMainDir):
        res = STCGridInd(-1,-1,STCVirtualVertType.NoVir)
        neiLst = self._stcGraph.neighbors(stc_ind)
        if dir == LawnMainDir.right:
            for nei in neiLst:
                if stc_ind.row + 1 == nei.row and stc_ind.col == nei.col:
                    return nei
            return res
        if dir == LawnMainDir.left:
            for nei in neiLst:
                if stc_ind.row + 1 == nei.row and stc_ind.col == nei.col:
                    return nei
            return res

        if dir == LawnMainDir.top:
            for nei in neiLst:
                if stc_ind.col + 1 == nei.col and stc_ind.row == nei.row:
                    return nei
            return res

        if dir == LawnMainDir.bottom:
            for nei in neiLst:
                if stc_ind.col - 1 == nei.col and stc_ind.row == nei.row:
                    return nei
            return res

    def getNextUnCoverLawnPos(self,stc_ind :STCGridInd, dir :LawnMainDir):
        res = STCGridInd(-1,-1,STCVirtualVertType.NoVir)
        neiLst = self._stcGraph.neighbors(stc_ind)
        if dir == LawnMainDir.right:
            for nei in neiLst:
                if nei not in self._coverSet:
                    if stc_ind.row + 1 == nei.row and stc_ind.col == nei.col:
                        return nei
            return res
        if dir == LawnMainDir.left:
            for nei in neiLst:
                if nei not in self._coverSet:
                    if stc_ind.row + 1 == nei.row and stc_ind.col == nei.col:
                        return nei
            return res

        if dir == LawnMainDir.top:
            for nei in neiLst:
                if nei not in self._coverSet:
                    if stc_ind.col + 1 == nei.col and stc_ind.row == nei.row:
                        return nei
            return res

        if dir == LawnMainDir.bottom:
            for nei in neiLst:
                if nei not in self._coverSet:
                    if stc_ind.col - 1 == nei.col and stc_ind.row == nei.row:
                        return nei
            return res

    def getNextDirPos(self,main_dir,c_dir,p_dir):
        dirSeq = self._dirDic[main_dir]
        c_ind = dirSeq.index(c_dir)
        if c_ind  ==  1:
            if dirSeq.index(p_dir) == 2:
                return dirSeq[0]
            else:
                return dirSeq[2]
        else:
            return dirSeq[1]

    def inRobSet(self,stc_ind:STCGridInd):

        if stc_ind in self._coverSet:
            return True
        return False

    def allCover(self):
        if len(self._coverSet) == self._waySTCNodeNum:
            return True
        else:
            return False
        # self._coverSet = set()


# def stcEvaluator(pop):
#     fitness  = 0
#     for ind in pop:
#         for x in ind:
#             fitness += x
#     return fitness

if __name__ == '__main__':
    ins = MCMPInstance()

    ins.loadCfg('D:\\py_code\\MCMP_encode\\benchmark\\r6_r32_c32_p0.8_s15_Outdoor_Cfg.dat')
    # ins.loadCfg('D:\\py_code\\MCMP_encode\\benchmark\\r2_r40_c20_p0.9_s1000_Outdoor_Cfg.dat')
    # ins.loadCfg('D:\\py_code\\MCMP_encode\\benchmark\\r2_r20_c20_p0.9_s1000_Outdoor_Cfg.dat')
    stc_eval = STCEvaluator(ins)
    # random.seed(6)
    # pop = []
    # for i in range(100):
    #     pop.append((random.random(),random.random(),random.random()))
    for seed in range(100):
        random.seed(seed)
        # random.seed(33)
        print(seed)
        pop = []
        for i in range(600):
            pop.append(random.random())

        # pop = [[0.10754700880355095, 0.3747030205016403, 0.8467029952096821], [0.8179480602067888, 0.28978161459048557, -0.061817810733454104], [0.2550690257394217, 0.49543508709194095, 0.4494910647887381], [0.651592972722763, 0.7887233511355132, 0.0938595867742349], [0.02834747652200631, 0.8357651039198697, 0.43276706790505337], [0.762280082457942, 0.0021060533511106927, 0.4453871940548014], [0.7215400323407826, 0.22876222127045265, 0.9452706955539223], [0.5075105415233063, 0.47988597075501366, 0.5209384176131452], [0.5414124727934966, 0.9391491627785106, 0.38120423768821243], [0.21659939713061338, 0.4221165755827173, 0.029040787574867943], [0.22319578024667075, 0.7116036647979832, 0.3948980098582996], [0.22169166627303505, 0.43788759365057206, 0.49581224138185065], [0.23308445025757263, 0.2308665415409843, 0.2187810373376886], [0.4596034657377336, 0.28978161459048557, 0.021489705265908876], [0.38655710476146987, 0.4209186792090759, 0.42082999993781356], [0.1859062658947177, 0.9925434121760651, 0.8599465287952899], [0.12088995980580641, 0.3326951853601291, 0.7214844075832684], [0.7215400323407826, 0.22876222127045265, 0.6370298197074602], [0.7111917696952796, 0.9364405867994596, 0.4221069999614152], [0.830035693274327, 0.670305566414071, 0.3033685109329176], [0.5875806061435594, 0.8824790008318577, 0.8461974184283128], [0.9540841761007466, 0.6485064180992564, 0.3948980098582996], [0.24273997354306764, 0.7974042475543028, 0.4143139993007743], [0.17300740157905092, 0.548798761388153, 0.7030407620656315], [0.1941186449851896, 0.573771199478443, 0.6659575282786826], [0.33204516274256446, 0.03791653059858058, 0.8194141106127972], [0.5084264882499818, 0.7784426150001458, 0.5209384176131452], [0.39325509496422606, 0.4896935204622582, 0.029574963966907064], [0.04348729035652743, 0.703382088603836, 0.9831877173096739], [0.4581468000997244, 0.027974984083842358, 0.40836419548741143], [0.5931837303800576, 0.393599686377914, 0.17034919685568128], [0.5022385584334831, 0.9820766375385342, 0.7705231398308006], [0.5396174484497788, 0.8602897789205496, 0.23217612806301458], [0.882696930394086, 0.47701009597226784, 0.10012914395045203], [0.1859062658947177, 0.9925434121760651, 0.8982921034208464], [0.513771663187637, 0.9524673882682695, 0.5777948078012031], [0.45913173191066836, 0.2692794774414212, 0.5479963094662489], [0.9571162814602269, 0.005709129450392925, 0.7836552326153898], [0.8204859119254819, 0.8861795808260082, 0.7405034118331963], [0.4260906796881502, 0.05612329752074041, 0.8700101551766398], [0.48492511222773416, 0.3567899645449557, 0.3460779190181549], [0.5384787957378443, 0.6234894527975051, 0.6124524647827256], [0.4581468000997244, 0.027974984083842358, 0.22960503127702392], [0.1772112589385827, 0.5844608707784413, 0.8610088608533248], [0.798438940577426, 0.7970975626354962, 0.8164373705606909], [0.25529404008730594, 0.841744832274096, 0.6731135254387071], [0.08323413780389788, 0.0166906301155596, 0.014559974924812313], [0.42881224677206103, 0.4210135874302673, 0.1155581805922733], [0.6248020841524763, 0.3444228640964949, 0.06951537853084733], [0.1596255246938475, 0.5273803990480128, 0.16814494622242826], [0.2729144368186801, 0.7115899271852729, 0.4547016300456639], [0.3220017663873259, 0.4737710141702789, 0.023634577631987064], [0.38655710476146987, 0.4209186792090759, 0.18803930475131292], [0.10876169244541334, 0.8998185003560202, 0.5101159809286764], [0.2090909925517701, 0.6056486400340165, 0.8170396683778869], [0.020818108509287336, 0.017864520827795327, 0.146461740399346], [0.7188354727617898, 0.16022759262970465, 0.7046056278520025], [0.6781757952769475, 0.5447021635789044, 0.22059974802267657], [0.9755945178178834, 0.797810857706151, 0.516599516949393], [0.22319578024667075, 0.6485064180992564, 0.3948980098582996], [0.5758459627880567, 0.32124580934512525, 0.6309478612713469], [0.058785116206491295, 0.29860594962301334, 0.9679033101508892], [0.8755342442351592, 0.30638662033324593, 0.8585144063565593], [0.31036362735313405, 0.9392884321352825, 0.7438421186671211], [0.4161722627650255, 0.25235810227983535, 0.008480262463668842], [0.8787178982088466, 0.03791653059858058, 0.8194141106127972], [0.962201125180818, 0.5702805702451802, 0.17151709517771863], [0.8677810644349934, 0.9737752361596916, 0.7040231423300713], [0.5088737460778905, 0.37796883434360806, 0.34693088456262167], [0.2057617572947047, 0.6741530142468641, 0.4329501211003163], [0.1941186449851896, 0.10442422284151531, 0.6659575282786826], [0.29607267308315155, 0.4997999222368016, 0.3253456548759963], [0.8716215074235552, 0.8996782696347811, 0.018092983640471738], [0.2008530114407594, 0.3277407050962675, 0.9870497179280261], [0.7827003757293756, 0.3390956478509337, 0.21302979638081376], [0.6744550697237632, 0.8377010701539643, 0.9321874718936273], [0.3438498147908198, 0.8823932024664636, 0.6871101821536574], [0.48449872261249405, 0.9855082298257978, 0.23464043487103847], [0.7254651862412724, 0.0846802304164842, 0.16969414179438758], [0.9109877835080679, 0.21296819499142416, 0.7591161827164402], [0.6002088301322496, 0.8411321957058551, 0.3681079994056491], [0.34028523500198804, 0.29121528741113467, 0.8674198235869027], [0.6039825288917112, 0.9543074571721899, 0.8872651047169627], [0.13534597739545295, 0.5511704740692165, 0.1042749980146136], [0.03913779859691058, 0.07319341883234853, 0.866168357366572], [0.7881164487252263, 0.8285059714691135, 0.3408974641165834], [0.6151860325590366, 0.7819036016327547, 0.3780396288383874], [0.5707815255990233, 0.2237140727487692, 0.08174326235239371], [0.26672364298173634, 0.8907681278553053, 0.5644468332401974], [0.9250672021084733, 0.4577692590412453, 0.2771827661076983], [0.7870146635603288, 0.8277681566457297, 0.012381744486666624], [0.670411639023931, 0.09168312261651779, 0.1151024984279273], [0.8850600703796611, 0.04002353689016469, 0.2396333648675093], [0.9881584986060327, 0.4210135874302673, 0.1155581805922733], [0.16738343746133177, 0.24142028509784308, 0.7440064165370084], [0.1028341459863098, 0.9107644182793333, 0.3782772705442261], [0.9702640365282106, 0.9092227281507113, 0.29402358494854774], [0.2534101360411267, 0.47701009597226784, 0.10012914395045203], [0.6520501994894172, 0.039620213413704475, 0.010506151518672291], [0.9825836265504634, 0.2955498600489178, 0.5965706431884413], [0.44984453463009777, 0.31328086106892794, 0.06296479004764532], [0.9133920171659404, 0.9698132768381156, 0.9697965044964699], [0.1113623101268919, 0.21519327003609845, 0.6178068800115557], [0.979952885890077, 0.5429131974847156, 0.6881898080477126], [0.6618344288753493, 0.259085991853645, 0.5416022629129655]]
        # pop = [0.3641041824923359, 0.9160732873463672, 0.3276580530077926, 0.6438283950840408, 0.7739088766376206, 0.9942181409601899, 0.004418767759807651, 0.8699011921170784, 0.6564666061545975, 0.02262460767997898, 0.7784167382296575, 0.7753652972522658, 0.7962150645677004, 0.6126083477691056, 0.4855153155389682, 0.7673508043610922, 0.6486085593718095, 0.7891885961556123, 0.8558432733658351, 0.37683699577308005, 0.7265337054988906, 0.35920268489165963, 0.5886147937520628, 0.8182464130852936, 0.5588621632758044, 0.733751693090788, 0.5702475991971736, 0.9791690914559747, 0.1082454599088627, 0.12631036740590673, 0.9281914316121835, 0.4412237666009514, 0.8017113611883854, 0.7138732657344543, 0.3398870400370193, 0.8417966310205653, 0.693974455974884, 0.2992730723760869, 0.9755399070958478, 0.8611473083283564, 0.8949443847294103, 0.07514253971067053, 0.7119107392696454, 0.8425506892451511, 0.9276411626154324, 0.9939402258299616, 0.031773370745445506, 0.14250401713316063, 0.18231196592277255, 0.7647735354915078, 0.9709877006434536, 0.76352695240307, 0.023179182439713064, 0.05377597508053222, 0.022466020560889532, 0.9548719076246664, 0.8011549654457616, 0.6832446128679281, 0.4062897449777947, 0.09724304721042987, 0.715650980552688, 0.4757733811084566, 0.43596723434710993, 0.3331638126505636, 0.3929423636542153, 0.6034666510370018, 0.5109788234152446, 0.8265953590296568, 0.6724117865300308, 0.5058151587936164, 0.5829634990955856, 0.29615184328747424, 0.991193899656256, 0.779908610155879, 0.11671754630912412, 0.7799024842164257, 0.8650939675810605, 0.4919764336559108, 0.5240524182328574, 0.9973371691231859, 0.703658643118711, 0.8035837937731044, 0.5004963954426499, 0.9958669296138863, 0.08700162654876609, 0.8717080543336735, 0.07845332162943142, 0.70086296977494, 0.026370476073673932, 0.3241754049887726, 0.1020559731613534, 0.3560980281353433, 0.5797208986289346, 0.3783272496746479, 2.2892277899533298e-05, 0.5420833382881904, 0.15133269100594837, 0.13868173222684943, 0.1583633976057981, 0.9241254264757528, 0.7146432301220127, 0.8881662840289164, 0.8620160551037354, 0.4546286096641885, 0.1464244468855065, 0.3782557083977618, 0.968378569145544, 0.8726281430454963, 0.05535216644925378, 0.1817890752524116, 0.5069860587426981, 0.5131912973774655, 0.9923724058035951, 0.006948231260942128, 0.2586068002467561, 0.6489947528489537, 0.6774227332213, 0.4137902919578612, 0.22406344368879816, 0.6995522227834672, 0.10343299750036072, 0.9443721394175739, 0.815467036915114, 0.11700024684020205, 0.7982322329698477, 0.09046989563147878, 0.18534928107402648, 0.07598544249481498, 0.4282210283595195, 0.5732053520291748, 0.9688767362864347, 0.15434934731898764, 0.3839097094708642, 0.08641627759652204, 0.052513390440612095, 0.2624757668019131, 0.3008778063681017, 0.045815284037451054, 0.3450607484866749, 0.2613797157909509, 0.12996539893007641, 0.23755637407038843, 0.2694969373321451, 0.14896435499741956, 0.28730525564069564, 0.24013384535139481, 0.7643431473528183, 0.22183052629154454, 0.5861863592650138, 0.5581679924871543, 0.8780921240741185, 0.7326041072710863, 0.37089749742832745, 0.8484858568182941, 0.8699963742006596, 0.32318213557407816, 0.27589658657926597, 0.08896468304032501, 0.846736101832733, 0.9060854119348783, 0.4178167256444736, 0.18962665873571982, 0.3005857311361847, 0.6456257657320993, 0.2175619235321785, 0.64809948713495, 0.9096886997741408, 0.596586841403056, 0.7121297802191694, 0.06574493055160213, 0.9953000792984351, 0.6013895482704373, 0.7449891326323355, 0.9876628265477732, 0.5858093707001933, 0.1007838174992951, 0.22520685124892625, 0.677268369712918, 0.0216603038179074, 0.3530459500644326, 0.06849836354156702, 0.3402277373890984, 0.9069260346402582, 0.419492475971708, 0.7320267148196777, 0.6032097049632695, 0.7800049728522584, 0.6963501061790476, 0.525112416876757, 0.2949609951875891, 0.07880631014298256, 0.31055563115537055, 0.019605256261752357, 0.703670362537575, 0.013051840159954087, 0.327259131216309, 0.013299072517382049, 0.866370184339779, 0.7671302242373408, 0.37898348293754225, 0.28130685358513985, 0.052996049148096525, 0.6344853551890789, 0.9475772416217305, 0.15526457275427885, 0.4032389289128395, 0.10848370330536328, 0.9434144029829806, 0.13442934797263895, 0.23586526904095173, 0.5044175311475733, 0.9672777425725897, 0.14456775768533525, 0.6892038241222795, 0.6798066543413754, 0.13373349078313734, 0.2349348486536329, 0.975016300131772, 0.10746835277200995, 0.013827850584718027, 0.6732988209821297, 0.012112886793750999, 0.5035874462835472, 0.37087341053681744, 0.947981778334755, 0.38104748554134826, 0.09884038845312426, 0.8645034201357079, 0.969039938088533, 0.7633098052552665, 0.7913955062941704, 0.35889581708153584, 0.14852347686038192, 0.3636345053237011, 0.8905095257769517, 0.05293054669962838, 0.5641817536304887, 0.35877299382182537, 0.27604898645827936, 0.8192888278700391, 0.8758772859331087, 0.7684390326107504, 0.8933257322918725, 0.030025417462005266, 0.4213464408410549, 0.2808024240347644, 0.8320793223993665, 0.31003667434091087, 0.9160456772564435, 0.6678491792550723, 0.688369431121108, 0.04714611138894853, 0.8903223934532566, 0.3552236634802518, 0.1161099757189058, 0.4930081549759371, 0.7552936347777174, 0.39667935452580605, 0.04611985119731743, 0.09721744462054427, 0.47637336447897327, 0.2609828916337914, 0.43787973607080277, 0.8989185568002274, 0.6682931817429536, 0.19242552804117208, 0.5900166842584815, 0.8474159877948235, 0.293677624972988, 0.0436689888249725, 0.1629685652767997, 0.40093111169887186, 0.8565194670392405, 0.3649664237387784, 0.26121609631242726, 0.6785133993420654, 0.2716884697230805, 0.25210437542943565, 0.3718216890169759, 0.4834140217152344, 0.37749720670871156, 0.8378751774684613, 0.9809347767756708, 0.11374079577222429, 0.6878820773083104, 0.11601898979972436, 0.5074661760141528, 0.25263445284444574, 0.03718017720246514, 0.015678984085528702, 0.2795014416962309, 0.7054675050401841, 0.5396552052045585, 0.7728950343241041, 0.6413543521846407, 0.8288260881189862, 0.5577718770458377, 0.796104605759146, 0.9125002137125787, 0.9156774294769566, 0.9838664230573705, 0.038625460996163596, 0.20520865403261423, 0.1253583631709202, 0.7475456449609773, 0.8971415147386309, 0.7599752517761976, 0.47026252176126737, 0.45313642046027935, 0.5138329331917229, 0.07489479553425071, 0.980669171933594, 0.9313343355326981, 0.11425651446701135, 0.5885324652083387, 0.293037361262794, 0.15894190718441992, 0.619206510013394, 0.013740784014295793, 0.6633319956658632, 0.17580128417062446, 0.33445981835565675, 0.09008405862965008, 0.4942916695336922, 0.36740675479710694, 0.26848459036472516, 0.8389785811018993, 0.992775127243551, 0.1653165328078421, 0.9052973077471421, 0.3674538301177567, 0.5786947794001176, 0.7849930706425159, 0.11358529655034566, 0.9765703257206884, 0.7442594371560751, 0.822083342051605, 0.5232244285337654, 0.2919720505722325, 0.521681942556373, 0.44665114839593856, 0.6676199729913161, 0.8502153543434925, 0.4581509264555337, 0.06893500488098137, 0.24662201506825687, 0.19336871564142633, 0.8807567647217137, 0.676931466609055, 0.8096013868890706, 0.2841940054243014, 0.4368653917208224, 0.7193065220417962, 0.6174284636924987]
        pop = [0.5519893319265321, 0.03756871046917687, 0.3740388886399163, 0.0416713089287708, 0.8715976631261071, 0.2902332320681067, 0.2847632086214107, 0.41184082382738574, 0.5576088392911145, 0.4463832260414693, 0.8511755194837057, 0.12122298691673039, 0.7581389623248542, 0.3986471777518089, 0.3637648328409302, 0.11167554175313998, 0.291138986070817, 0.7988318255776699, 0.9817917057025374, 0.10475664199639922, 0.39799752533915844, 0.11508529151414937, 0.7325067458191008, 0.7972540921408049, 0.35236537498476317, 0.8670142277957306, 0.6148083682450746, 0.11831152413603496, 0.16315751134276368, 0.14980210921916193, 0.6859918544878716, 0.6643773062307319, 0.8111370636309317, 0.6955744248611884, 0.7906062689299805, 0.14286099133152996, 0.9014708463195942, 0.5462803700645842, 0.9344813853682803, 0.7289297840190098, 0.9732159382894968, 0.4712051810307052, 0.3572807434642048, 0.2401544993998982, 0.1545132468784094, 0.8091471578547608, 0.7707569415973664, 0.9507701870989641, 0.1869387717658264, 0.4137183065680503, 0.6768075045557947, 0.7329315095059521, 0.6814944404337255, 0.27391024238175354, 0.353238712338505, 0.26480699457679713, 0.23668122930056157, 0.9433455301826842, 0.7101855508812674, 0.1295310575426526, 0.7273544755351539, 0.8281150300225106, 0.7338015425695517, 0.466976866282671, 0.8485723893551308, 0.42724568612297964, 0.05873618826381477, 0.8608469256805962, 0.9040336668581936, 0.9992201914143197, 0.49703197348274386, 0.6368233263047205, 0.07531128251300812, 0.6888673756843805, 0.9906243317182984, 0.5193801884275118, 0.6565480631706467, 0.019694373107598917, 0.05778528985211473, 0.8642940881401293, 0.8347402893706698, 0.8048478007595102, 0.5126495573553776, 0.7120186006770133, 0.07069664002893772, 0.6733058216662836, 0.4141804485719489, 0.2892437048247515, 0.28105361038801135, 0.5786231260894458, 0.12547931925171207, 0.36749435008397435, 0.5155726574307748, 0.2908280038439456, 0.6785963095949594, 0.15772869657610844, 0.07442589671267796, 0.10083861615598133, 0.9633216087114778, 0.606037469016443, 0.9600612338140156, 0.21169033554168937, 0.9957389038461221, 0.9203262077030959, 0.8203742622949791, 0.7585325041327701, 0.47962185964310244, 0.24046195291466577, 0.2850603509619778, 0.880866562364214, 0.8413722624159612, 0.5958808250796703, 0.5001639385208527, 0.3417520218003198, 0.24549018740413275, 0.1921111449545171, 0.7836846424373349, 0.9416116012052574, 0.8713908349056118, 0.45470079945305963, 0.06384480797175551, 0.7499042403060784, 0.4453487233190593, 0.956113089527741, 0.16563865154428348, 0.02304438376576523, 0.2480019305209118, 0.37737557855982395, 0.19430015633972364, 0.6781064739380148, 0.31685633451675776, 0.9713775544460413, 0.37703479452948985, 0.9488004518050914, 0.5252343509090636, 0.496998571243055, 0.062213091635850315, 0.01805269990565339, 0.5663961923557961, 0.7934809018777711, 0.49139753836076927, 0.07986597816280361, 0.8992364802576679, 0.41932390332248637, 0.6643636241502264, 0.04684243743324812, 0.7888179126176561, 0.6556747290505639, 0.8750242841984976, 0.47935477449112596, 0.3003048564667352, 0.16602297752103534, 0.9370523994645875, 0.6422574620170497, 0.2618112987661314, 0.3306417531496705, 0.30529686122359156, 0.8265438422188661, 0.008636161987733315, 0.6222334951711977, 0.894033283678425, 0.3304023547700805, 0.31911947025559506, 0.723937923353444, 0.0692280082996255, 0.897379931130417, 0.4307307010923924, 0.47976483904005196, 0.17390069650738083, 0.8052939517056443, 0.5062807776047172, 0.691606968628718, 0.0038791760158205513, 0.429673209734444, 0.38298224676705495, 0.9879225465732302, 0.36189831116663596, 0.10368192450347447, 0.559535315577342, 0.14163957999487742, 0.9569716596046288, 0.6443004509576642, 0.8118037744258196, 0.7246948185745128, 0.406669604805209, 0.005863292705256651, 0.05847044945332247, 0.2864949518128519, 0.051259866823319955, 0.019156903699755645, 0.9777155246054139, 0.39093368666620276, 0.7812352651572028, 0.18581928372103507, 0.38506618780796575, 0.9898957923721483, 0.5379723963737594, 0.4739691613711249, 0.3793171595492848, 0.2166562910777311, 0.9984343656292287, 0.4890565211146467, 0.4976359217936489, 0.3029904338382182, 0.4727279934430886, 0.5761858137463927, 0.16514299432395574, 0.8831190993818107, 0.002455425409807699, 0.5123798570538157, 0.9505265118325865, 0.5104511930778277, 0.022531049479201926, 0.7277452761821538, 0.680362660807226, 0.657119742739911, 0.623779661686002, 0.22615422176428024, 0.6659225027774031, 0.214076724868713, 0.13492814067532932, 0.8431092640442365, 0.9704490025457081, 0.04983780967866891, 0.033512462598013326, 0.21007015520470873, 0.583849426235217, 0.9383154827213532, 0.021760330513136417, 0.5421025564008618, 0.34401143032025805, 0.5917927845321906, 0.30393391190220287, 0.3073558594924912, 0.6568536806402777, 0.6873239356026273, 0.41785033780499337, 0.10824983338091099, 0.599565575121019, 0.03427712990029641, 0.9018605388792783, 0.018044680978212102, 0.18127430295221325, 0.21387482059643648, 0.6897049350494221, 0.7590125588814834, 0.9821096138517265, 0.7712470909739163, 0.7385350324245701, 0.38095119038436565, 0.6210416171115358, 0.0848147373796575, 0.6179513659176914, 0.07519444757464444, 0.10119651229479898, 0.6852787082022127, 0.050233895287890906, 0.13759985178542922, 0.4616115352142599, 0.10664006374733503, 0.8984680299450467, 0.24411308265829879, 0.34522425606327645, 0.2676035268001802, 0.7835157997698038, 0.9142018031238637, 0.6216934752663515, 0.9064920118525667, 0.7245334307010671, 0.3223198327102432, 0.37318753586555176, 0.6700639920737649, 0.7125554948979111, 0.8881732116761474, 0.15106401374040224, 0.9966077305832889, 0.2743290977955055, 0.5756159383971177, 0.8031213882473334, 0.29167388171471087, 0.11366862708074121, 0.4196121006254432, 0.7558173766841902, 0.5732606983281863, 0.69013567220686, 0.38726666276851107, 0.5365971678821748, 0.9853721008518573, 0.9975956385631464, 0.3372079684585536, 0.07909517191053017, 0.5251833077232129, 0.46689657850184774, 0.4616772822635571, 0.12783309891369665, 0.07623325429159689, 0.1831091679883552, 0.19393484831387475, 0.7757440581495977, 0.3856969023527791, 0.9518490410997824, 0.3675549055516222, 0.4329274925794304, 0.4052114729350247, 0.5194259688491558, 0.25052735788699954, 0.6108250847790784, 0.27112119026195236, 0.6173485481327268, 0.5250987609612435, 0.013216378691912056, 0.8570979912976859, 0.784401875814999, 0.34577417787471065, 0.2650000798434311, 0.002676451727757323, 0.5241216962899633, 0.7566999786403736, 0.9577050424686991, 0.6371788062628683, 0.435120516742992, 0.33261685141921826, 0.6862997289551056, 0.6563057670080894, 0.474796323746128, 0.3741293636753833, 0.6982012697312658, 0.31979312804423154, 0.8399585226753209, 0.8681066097939872, 0.6968314386279985, 0.8447773673132981, 0.5987073846188028, 0.8472765941492134, 0.7624859546192613, 0.02922832262127517, 0.6373882216971565, 0.421381640693842, 0.32770179209480854, 0.48624799831686616, 0.3659179383732104, 0.5065824906514631, 0.0419305528124605, 0.4947326234152972, 0.3634726240542643, 0.2934738707200637, 0.8924210152205493, 0.6302091262953547, 0.3305387844513241, 0.5028033967254699, 0.01601156019262817, 0.8078378034712776, 0.6766337502561842, 0.009703736956890197, 0.13829745881251154, 0.8536505313818674, 0.12646677784864757, 0.9039454369777847, 0.321002894356755, 0.443067687412827, 0.8221383621890075, 0.8717817559991674, 0.7221219612402803, 0.39676860838994266, 0.11138950123802616, 0.755007908689278, 0.8141809125632118, 0.6659639003391665, 0.999618237592697, 0.673589554740631, 0.8931062764038787, 0.587710416130399, 0.2859471866287797, 0.7896317381510205, 0.33551658429776254, 0.9737417882413374, 0.18181296537795122, 0.1838390149441258, 0.11689370725990966, 0.8786537385503199, 0.2972139140469272, 0.03863772341886795, 0.9963713264952404, 0.26421398303813404, 0.03481945100204786, 0.9420937666586919, 0.4941150975981996, 0.6912726970708094, 0.6076061224381067, 0.4270572968676918, 0.20400112071804144, 0.1678664015720025, 0.9857353110702672, 0.8151286683550978, 0.9889758130587104, 0.23628335043784499, 0.949120407360945, 0.3546729432178265, 0.01449887298091157, 0.4261031530249404, 0.9318388953500145, 0.3283718252524377]

        robPatternLst = [[] for x in range(stc_eval._robNum)]
        robID = 0
        for i in range(0, len(pop), 3):
            # for x in individual:
            robPatternLst[robID].append((pop[i], pop[i + 1], pop[i + 2]))
            # print(robPatternLst)
            if robID == (stc_eval._robNum - 1):
                robID = 0
            else:
                robID += 1

    # print(pop)
    #     e_start = time .clock()
        makespan = stc_eval.evaluate(robPatternLst)
    #     print('makespan = ', makespan)
    #     e_end = time .clock()
    #     print('evaluate time = ', e_end - e_start)
        e_start = time .clock()
        try:
            stc_eval.evaluate(robPatternLst)
            pathLst = stc_eval.stcConvertPath._pathLst
        except Exception as e:
            # pathLst = stc_eval.stcConvertPath._virPathLst
            # print(pathLst)
            print(e)
        e_end = time.clock()
        # stc_eval.evaluate(pop)
        print('evaluate time = ', e_end - e_start)

        #     pass

    # allEdgeLstPnt = []
    # _graph = stc_eval._stcGraph
    # for edge in stc_eval._stcGraph.edges():
    #     # print(edge)
    #     sPnt_x = _graph.nodes[edge[0]]['vert']._pos_x
    #     sPnt_y = _graph.nodes[edge[0]]['vert']._pos_y
    #     tPnt_x = _graph.nodes[edge[1]]['vert']._pos_x
    #     tPnt_y = _graph.nodes[edge[1]]['vert']._pos_y
    #     # edgeLst.append((t_pos_x, t_pos_y, s_pos_x, s_pos_y))
    #
    #     allEdgeLstPnt.append((sPnt_x, sPnt_y, tPnt_x, tPnt_y))
    # drawSTCPic(ins,allEdgeLstPnt)
        stcGraphLst = []
        allEdgeLstPnt = []
        for robID in range(stc_eval._robNum):
            # print(stc_eval._robSetLst)
            _robSet  = stc_eval._robSetLst[robID]
            _stcGraph = []
            for stcGridInd in _robSet:
                _stcGraph.append((stcGridInd.row *2 , stcGridInd.col *2))
            stcGraphLst.append(_stcGraph)

            stree = stc_eval._robStreeLst[robID]
            edgeLst = []
            for edge in stree.edges():
                # print(edge)
                t_pos_x = stc_eval._stcGraph.nodes[edge[0]]['vert']._pos_x
                t_pos_y = stc_eval._stcGraph.nodes[edge[0]]['vert']._pos_y

                s_pos_x = stc_eval._stcGraph.nodes[edge[1]]['vert']._pos_x
                s_pos_y = stc_eval._stcGraph.nodes[edge[1]]['vert']._pos_y

                edgeLst.append((t_pos_x,t_pos_y,s_pos_x,s_pos_y))
            allEdgeLstPnt.append(edgeLst)
        # print(stcGraphLst)
        # drawEvalSTCGraph(ins,stcGraphLst= stcGraphLst, edgePntLst = allEdgeLstPnt)
        drawEvalSTCGraph(ins,stcGraphLst= stcGraphLst, edgePntLst = allEdgeLstPnt, multiPath= pathLst)
        drawPic(ins)
        exit()
    drawEvalSTCGraph(ins,stcGraphLst= stcGraphLst, edgePntLst = allEdgeLstPnt, multiPath= stc_eval.stcConvertPath._pathLst)
        # drawPic(ins)
